#define YY_parse_h_included
/*#define YY_USE_CLASS 
*/
/*  A Bison++ parser, made from src/yf2.y  */

 /* with Bison++ version bison++ Version 1.21.9-1, adapted from GNU bison by coetmeur@icdc.fr
Maintained by Magnus Ekdahl <magnus@debian.org>
  */


#line 1 "/usr/share/bison++/bison.cc"
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Bob Corbett and Richard Stallman

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  

   As a special exception, when this file is copied by Bison++ into a
   Bison++ output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison, and has been in Bison++ since 1.21.9.  

*/

/* HEADER SECTION */
#if defined( _MSDOS ) || defined(MSDOS) || defined(__MSDOS__) 
 #define __MSDOS_AND_ALIKE
#endif

#if defined(_WINDOWS) && defined(_MSC_VER)
 #define __HAVE_NO_ALLOCA
 #define __MSDOS_AND_ALIKE
#endif

#ifndef alloca
 #if defined( __GNUC__)
  #define alloca __builtin_alloca

 #elif (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc)  || defined (__sgi)
  #include <alloca.h>

 #elif defined (__MSDOS_AND_ALIKE)
  #include <malloc.h>
  #ifndef __TURBOC__
   /* MS C runtime lib */
   #define alloca _alloca
  #endif

 #elif defined(_AIX)
  /* pragma must be put before any C/C++ instruction !! */
  #pragma alloca
  #include <malloc.h>

 #elif defined(__hpux)
  #ifdef __cplusplus
   extern "C" {
     void *alloca (unsigned int);
   };
  #else /* not __cplusplus */
   void *alloca ();
  #endif /* not __cplusplus */

 #endif /* not _AIX  not MSDOS, or __TURBOC__ or _AIX, not sparc.  */
#endif /* alloca not defined.  */

#ifdef c_plusplus
 #ifndef __cplusplus
  #define __cplusplus
 #endif
#endif

#ifdef __cplusplus
 #ifndef YY_USE_CLASS
/*#warning "For C++ its recomended to use bison++, otherwise classes won't be generated"*/
 #endif
#else
 #ifndef __STDC__
  #define const
 #endif
 #ifdef YY_USE_CLASS
  #error "This is a C++ header generated by bison++, please use a C++ compiler!"
 #endif
#endif

#include <stdio.h>
#define YYBISON 1  

 #line 88 "/usr/share/bison++/bison.cc"
#line 1 "src/yf2.y"

#include <fstream>
#include <string.h>
#include "shape.h"
#include "elenode.h"
#include <iostream>
#include <vector>
using namespace std;
char *ReservedWordsList[]={
                       (char *)"all",
                       (char *)"axis1",
                       (char *)"axis2",
                       (char *)"axis3",
                       (char *)"at",
                       (char *)"begin",
		       (char *)"block",
                       (char *)"capacitance",
                       (char *)"chrg",
                       (char *)"conductor",
                       (char *)"const",
                       (char *)"cylinder",
                       (char *)"cut",
                       (char *)"debug", 
                       (char *)"diel",	
                       (char *)"element",
		       (char *)"elementgap",
                       (char *)"end",
                       (char *)"endb",
                       (char *)"endc",
                       (char *)"endl",
                       (char *)"endm",
                       (char *)"ends",
                       (char *)"endp",
                       (char *)"for",
                       (char *)"in",
		       (char *)"inloop",
		       (char *)"layernum",
                       (char *)"local",
                       (char *)"mastergap",
                       (char *)"medium",
                       (char *)"merge",
		       (char *)"outloop",
                       (char *)"override",
                       (char *)"plane",
                       (char *)"poly",
                       (char *)"print",
                       (char *)"radius",
                       (char *)"resistance",
                       (char *)"scale",
                       (char *)"sphere",
		       (char *)"touch",	
                       (char *)"vertex",
		       (char *)"volt",
                       (char *)"window",
		       (char *)"with",
                       (char *)"B3D_Format",
                       (char *)"point",		//yuwj, 2013.3
					   (char *)"vtxlist",	//add by [whquan]
					   (char *)"outloop3d",	//add by [whquan]
					   (char *)"medium_interface",	//add by [whquan]
					   (char *)"within"		//add by [whquan]
            };
const int TokenLen=sizeof(ReservedWordsList)/sizeof(ReservedWordsList[0]);
const int ConstPos=10;
const char RemarkChar=0x2f;


#define point_maxno 200

typedef struct tagOBJECTFIELD {
  char Name[32];
}OBJECTFIELD;

/*panhui1996.12.24*/
OBJECTFIELD *ObjField;
static WORD ObjNum;

/*panhui1996.12.24*/
char **ConstVarList;

double *ConstValList;
static int ConstVarNum;

TPOINT2D *pddlPoint2DBuf;
TPOINT *pddlPoint3DBuf;	//add by [whquan]
TPOINT2D *pddlOutLoopPoint2DBuf;
TPOINT *pddlOutLoopPoint3DBuf;	//add by [whquan]
TPOINT *pddlInterfacePoint3DBuf;	//add by [whquan]
TPOINT **pddlInterfacePoint3DBufMul;	//add by [whquan]
 WORD   pddlPoint2DNum;
 WORD   pddlPoint3DNum;	//add by [whquan]
 WORD   pddlInterfacePoint3DNum;	//add by [whquan]
 WORD   pddlOutLoopPoint2DNum;
 WORD   pddlOutLoopPoint3DNum;	//add by [whquan]

TPOINT observePoint;		/* yuwj 2013.3 */
//add by [whquan]
#define NULL_TRANS_AREA			0
#define CUBE_TRANS_AREA 		1
#define PRISM_TRANS_AREA  		2
#define PRISM_TSV_TRANS_AREA 	3
#define FRUSTUM_TRANS_AREA		4

//ADD BY [whquan]
extern TBDELEINFO **gBdElements;
extern TGEOMETRYINFO *tempblock2;	//to save every block geometry info

vector<CONDUCTORINFO> conductors;
CONDUCTORINFO cond;

extern int trans_area_type[10];
extern void point2Dto3D(int);
extern void point3D_save(int);
extern int pointInMediumId;

extern ifstream *tpddlin;
extern int block_number;
extern int cond_number;
extern bool bcm;
extern bool frw;
int InterfaceNum; 

extern uint Curmed;
ushort miline;
char tmp[32];
double *tempelec;
double lu_diel;
int layer;
char * Seperate=(char *)"-------------------------------------------\n";
/*
 *function prototype define here!
 */
int  yylex();
void yyerror(char *s);// Shenbd
BOOL IsAlpha(char);
BOOL IsDigit(char);
int  DoAlpha(ifstream *);
int  DoDigit(ifstream *);


#line 142 "src/yf2.y"
typedef union {
   
	double fval;
   int ival;
   TVECTOR       vector;
   TPOINT2D      pt2D;
   TPOINT		 pt3D;
   TGEOMETRYINFO tgGeomInfo;
   TGEOMETRYINFO2 tgGeomInfo2;
   TELECTRICITYINFO teElecInfo;
   TBOUNDELEINFO tbBouEleInfo;
} yy_parse_stype;
#define YY_parse_STYPE yy_parse_stype
#ifndef YY_USE_CLASS
#define YYSTYPE yy_parse_stype
#endif

#line 88 "/usr/share/bison++/bison.cc"
/* %{ and %header{ and %union, during decl */
#define YY_parse_BISON 1

#ifndef YY_parse_COMPATIBILITY
 #ifndef YY_USE_CLASS
  #define  YY_parse_COMPATIBILITY 1
 #else
  #define  YY_parse_COMPATIBILITY 0
 #endif
#endif

#if YY_parse_COMPATIBILITY != 0
 /* backward compatibility */
 #ifdef YYLTYPE
  #ifndef YY_parse_LTYPE
   #define YY_parse_LTYPE YYLTYPE
  #endif
 #endif
/* Testing alternative bison solution
   /#ifdef YYSTYPE*/
#ifndef YY_parse_STYPE 
   #define YY_parse_STYPE YYSTYPE
#endif
/*#endif*/
 #ifdef YYDEBUG
  #ifndef YY_parse_DEBUG
   #define  YY_parse_DEBUG YYDEBUG
  #endif
 #endif
 
 /* use goto to be compatible */
 #ifndef YY_parse_USE_GOTO
  #define YY_parse_USE_GOTO 1
 #endif
#endif

/* use no goto to be clean in C++ */
#ifndef YY_parse_USE_GOTO
 #define YY_parse_USE_GOTO 0
#endif

#ifndef YY_parse_PURE

 #line 130 "/usr/share/bison++/bison.cc"

#line 130 "/usr/share/bison++/bison.cc"
/*  YY_parse_PURE */
#endif

/* section apres lecture def, avant lecture grammaire S2 */

 #line 134 "/usr/share/bison++/bison.cc"

#line 134 "/usr/share/bison++/bison.cc"
/* prefix */
#ifndef YY_parse_DEBUG

 #line 136 "/usr/share/bison++/bison.cc"

#line 136 "/usr/share/bison++/bison.cc"
/* YY_parse_DEBUG */
#endif


#ifndef YY_parse_LSP_NEEDED

 #line 141 "/usr/share/bison++/bison.cc"

#line 141 "/usr/share/bison++/bison.cc"
 /* YY_parse_LSP_NEEDED*/
#endif



/* DEFAULT LTYPE*/
#ifdef YY_parse_LSP_NEEDED
#ifndef YY_parse_LTYPE
#ifndef BISON_YYLTYPE_ISDECLARED
#define BISON_YYLTYPE_ISDECLARED
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#endif
#define YY_parse_LTYPE yyltype
#endif
#endif
/* DEFAULT STYPE*/
      /* We used to use `unsigned long' as YY_parse_STYPE on MSDOS,
	 but it seems better to be consistent.
	 Most programs should declare their own type anyway.  */

#ifndef YY_parse_STYPE
#define YY_parse_STYPE int
#endif
/* DEFAULT MISCELANEOUS */
#ifndef YY_parse_PARSE
#define YY_parse_PARSE yyparse
#endif
#ifndef YY_parse_LEX
#define YY_parse_LEX yylex
#endif
#ifndef YY_parse_LVAL
#define YY_parse_LVAL yylval
#endif
#ifndef YY_parse_LLOC
#define YY_parse_LLOC yylloc
#endif
#ifndef YY_parse_CHAR
#define YY_parse_CHAR yychar
#endif
#ifndef YY_parse_NERRS
#define YY_parse_NERRS yynerrs
#endif
#ifndef YY_parse_DEBUG_FLAG
#define YY_parse_DEBUG_FLAG yydebug
#endif
#ifndef YY_parse_ERROR
#define YY_parse_ERROR yyerror
#endif

#ifndef YY_parse_PARSE_PARAM
 #ifndef YY_USE_CLASS
  #ifdef YYPARSE_PARAM
   #define YY_parse_PARSE_PARAM void* YYPARSE_PARAM 
  #else
   #ifndef __STDC__
    #ifndef __cplusplus
     #define YY_parse_PARSE_PARAM
    #endif
   #endif
  #endif
 #endif
 #ifndef YY_parse_PARSE_PARAM
  #define YY_parse_PARSE_PARAM void
 #endif
#endif

#if YY_parse_COMPATIBILITY != 0
/* backward compatibility */
#ifdef YY_parse_LTYPE
#ifndef YYLTYPE
#define YYLTYPE YY_parse_LTYPE
#else
/* WARNING obsolete !!! user defined YYLTYPE not reported into generated header */
#endif
#endif

/* Removed due to bison compabilityproblems
/#ifndef YYSTYPE
/#define YYSTYPE YY_parse_STYPE
/#else*/
/* WARNING obsolete !!! user defined YYSTYPE not reported into generated header */
/*#endif*/

#ifdef YY_parse_PURE
#  ifndef YYPURE
#    define YYPURE YY_parse_PURE
#  endif
#endif

#ifdef YY_parse_DEBUG
#  ifndef YYDEBUG
#    define YYDEBUG YY_parse_DEBUG 
#  endif
#endif

#ifndef YY_parse_ERROR_VERBOSE
 #ifdef YYERROR_VERBOSE
  #define YY_parse_ERROR_VERBOSE YYERROR_VERBOSE
 #endif
#endif

#ifndef YY_parse_LSP_NEEDED
#  ifdef YYLSP_NEEDED
#    define YY_parse_LSP_NEEDED YYLSP_NEEDED
#  endif
#endif

#endif

#ifndef YY_USE_CLASS
/* TOKEN C */

 #line 263 "/usr/share/bison++/bison.cc"
#define	ALL	300
#define	AXIS1	301
#define	AXIS2	302
#define	AXIS3	303
#define	AT	304
#define	BEGIN	305
#define	BLOCK	306
#define	CAPACITANCE	307
#define	CHRG	308
#define	CONDUCTOR	309
#define	CONST	310
#define	CYLINDER	311
#define	CUT	312
#define	DEBUG1	313
#define	DIEL	314
#define	ELEMENT	315
#define	ELEMENTGAP	316
#define	END	317
#define	ENDB	318
#define	ENDC	319
#define	ENDL	320
#define	ENDM	321
#define	ENDS	322
#define	ENDP	323
#define	FOR	324
#define	In	325
#define	INLOOP	326
#define	LAYERNUM	327
#define	LOCAL	328
#define	MASTERGAP	329
#define	MEDIUM	330
#define	MERGE	331
#define	OUTLOOP	332
#define	OVERRIDE	333
#define	PLANE	334
#define	POLY	335
#define	PRINT	336
#define	RADIUS	337
#define	RESISTANCE	338
#define	SCALE	339
#define	SPHERE	340
#define	TOUCH	341
#define	VERTEX	342
#define	VOLT	343
#define	WINDOW	344
#define	WITH	345
#define	B3D_FORMAT	346
#define	POINT	347
#define	VTXLIST	348
#define	OUTLOOP3D	349
#define	MEDIUM_INTERFACE	350
#define	WITHIN	351
#define	CONSTVAR1	400
#define	CONSTVAR2	401
#define	NEWOBJ	500
#define	OLDOBJ	501
#define	MYEOF	600
#define	FREG	601
#define	UMINUS	258


#line 263 "/usr/share/bison++/bison.cc"
 /* #defines tokens */
#else
/* CLASS */
#ifndef YY_parse_CLASS
#define YY_parse_CLASS parse
#endif
#ifndef YY_parse_INHERIT
#define YY_parse_INHERIT
#endif
#ifndef YY_parse_MEMBERS
#define YY_parse_MEMBERS 
#endif
#ifndef YY_parse_LEX_BODY
#define YY_parse_LEX_BODY  
#endif
#ifndef YY_parse_ERROR_BODY
#define YY_parse_ERROR_BODY  
#endif
#ifndef YY_parse_CONSTRUCTOR_PARAM
#define YY_parse_CONSTRUCTOR_PARAM
#endif
#ifndef YY_parse_CONSTRUCTOR_CODE
#define YY_parse_CONSTRUCTOR_CODE
#endif
#ifndef YY_parse_CONSTRUCTOR_INIT
#define YY_parse_CONSTRUCTOR_INIT
#endif
/* choose between enum and const */
#ifndef YY_parse_USE_CONST_TOKEN
#define YY_parse_USE_CONST_TOKEN 0
/* yes enum is more compatible with flex,  */
/* so by default we use it */ 
#endif
#if YY_parse_USE_CONST_TOKEN != 0
#ifndef YY_parse_ENUM_TOKEN
#define YY_parse_ENUM_TOKEN yy_parse_enum_token
#endif
#endif

class YY_parse_CLASS YY_parse_INHERIT
{
public: 
#if YY_parse_USE_CONST_TOKEN != 0
/* static const int token ... */

 #line 307 "/usr/share/bison++/bison.cc"
static const int ALL;
static const int AXIS1;
static const int AXIS2;
static const int AXIS3;
static const int AT;
static const int BEGIN;
static const int BLOCK;
static const int CAPACITANCE;
static const int CHRG;
static const int CONDUCTOR;
static const int CONST;
static const int CYLINDER;
static const int CUT;
static const int DEBUG1;
static const int DIEL;
static const int ELEMENT;
static const int ELEMENTGAP;
static const int END;
static const int ENDB;
static const int ENDC;
static const int ENDL;
static const int ENDM;
static const int ENDS;
static const int ENDP;
static const int FOR;
static const int In;
static const int INLOOP;
static const int LAYERNUM;
static const int LOCAL;
static const int MASTERGAP;
static const int MEDIUM;
static const int MERGE;
static const int OUTLOOP;
static const int OVERRIDE;
static const int PLANE;
static const int POLY;
static const int PRINT;
static const int RADIUS;
static const int RESISTANCE;
static const int SCALE;
static const int SPHERE;
static const int TOUCH;
static const int VERTEX;
static const int VOLT;
static const int WINDOW;
static const int WITH;
static const int B3D_FORMAT;
static const int POINT;
static const int VTXLIST;
static const int OUTLOOP3D;
static const int MEDIUM_INTERFACE;
static const int WITHIN;
static const int CONSTVAR1;
static const int CONSTVAR2;
static const int NEWOBJ;
static const int OLDOBJ;
static const int MYEOF;
static const int FREG;
static const int UMINUS;


#line 307 "/usr/share/bison++/bison.cc"
 /* decl const */
#else
enum YY_parse_ENUM_TOKEN { YY_parse_NULL_TOKEN=0

 #line 310 "/usr/share/bison++/bison.cc"
	,ALL=300
	,AXIS1=301
	,AXIS2=302
	,AXIS3=303
	,AT=304
	,BEGIN=305
	,BLOCK=306
	,CAPACITANCE=307
	,CHRG=308
	,CONDUCTOR=309
	,CONST=310
	,CYLINDER=311
	,CUT=312
	,DEBUG1=313
	,DIEL=314
	,ELEMENT=315
	,ELEMENTGAP=316
	,END=317
	,ENDB=318
	,ENDC=319
	,ENDL=320
	,ENDM=321
	,ENDS=322
	,ENDP=323
	,FOR=324
	,In=325
	,INLOOP=326
	,LAYERNUM=327
	,LOCAL=328
	,MASTERGAP=329
	,MEDIUM=330
	,MERGE=331
	,OUTLOOP=332
	,OVERRIDE=333
	,PLANE=334
	,POLY=335
	,PRINT=336
	,RADIUS=337
	,RESISTANCE=338
	,SCALE=339
	,SPHERE=340
	,TOUCH=341
	,VERTEX=342
	,VOLT=343
	,WINDOW=344
	,WITH=345
	,B3D_FORMAT=346
	,POINT=347
	,VTXLIST=348
	,OUTLOOP3D=349
	,MEDIUM_INTERFACE=350
	,WITHIN=351
	,CONSTVAR1=400
	,CONSTVAR2=401
	,NEWOBJ=500
	,OLDOBJ=501
	,MYEOF=600
	,FREG=601
	,UMINUS=258


#line 310 "/usr/share/bison++/bison.cc"
 /* enum token */
     }; /* end of enum declaration */
#endif
public:
 int YY_parse_PARSE (YY_parse_PARSE_PARAM);
 virtual void YY_parse_ERROR(char *msg) YY_parse_ERROR_BODY;
#ifdef YY_parse_PURE
#ifdef YY_parse_LSP_NEEDED
 virtual int  YY_parse_LEX (YY_parse_STYPE *YY_parse_LVAL,YY_parse_LTYPE *YY_parse_LLOC) YY_parse_LEX_BODY;
#else
 virtual int  YY_parse_LEX (YY_parse_STYPE *YY_parse_LVAL) YY_parse_LEX_BODY;
#endif
#else
 virtual int YY_parse_LEX() YY_parse_LEX_BODY;
 YY_parse_STYPE YY_parse_LVAL;
#ifdef YY_parse_LSP_NEEDED
 YY_parse_LTYPE YY_parse_LLOC;
#endif
 int   YY_parse_NERRS;
 int    YY_parse_CHAR;
#endif
#if YY_parse_DEBUG != 0
 int YY_parse_DEBUG_FLAG;   /*  nonzero means print parse trace     */
#endif
public:
 YY_parse_CLASS(YY_parse_CONSTRUCTOR_PARAM);
public:
 YY_parse_MEMBERS 
};
/* other declare folow */
#if YY_parse_USE_CONST_TOKEN != 0

 #line 341 "/usr/share/bison++/bison.cc"
const int YY_parse_CLASS::ALL=300;
const int YY_parse_CLASS::AXIS1=301;
const int YY_parse_CLASS::AXIS2=302;
const int YY_parse_CLASS::AXIS3=303;
const int YY_parse_CLASS::AT=304;
const int YY_parse_CLASS::BEGIN=305;
const int YY_parse_CLASS::BLOCK=306;
const int YY_parse_CLASS::CAPACITANCE=307;
const int YY_parse_CLASS::CHRG=308;
const int YY_parse_CLASS::CONDUCTOR=309;
const int YY_parse_CLASS::CONST=310;
const int YY_parse_CLASS::CYLINDER=311;
const int YY_parse_CLASS::CUT=312;
const int YY_parse_CLASS::DEBUG1=313;
const int YY_parse_CLASS::DIEL=314;
const int YY_parse_CLASS::ELEMENT=315;
const int YY_parse_CLASS::ELEMENTGAP=316;
const int YY_parse_CLASS::END=317;
const int YY_parse_CLASS::ENDB=318;
const int YY_parse_CLASS::ENDC=319;
const int YY_parse_CLASS::ENDL=320;
const int YY_parse_CLASS::ENDM=321;
const int YY_parse_CLASS::ENDS=322;
const int YY_parse_CLASS::ENDP=323;
const int YY_parse_CLASS::FOR=324;
const int YY_parse_CLASS::In=325;
const int YY_parse_CLASS::INLOOP=326;
const int YY_parse_CLASS::LAYERNUM=327;
const int YY_parse_CLASS::LOCAL=328;
const int YY_parse_CLASS::MASTERGAP=329;
const int YY_parse_CLASS::MEDIUM=330;
const int YY_parse_CLASS::MERGE=331;
const int YY_parse_CLASS::OUTLOOP=332;
const int YY_parse_CLASS::OVERRIDE=333;
const int YY_parse_CLASS::PLANE=334;
const int YY_parse_CLASS::POLY=335;
const int YY_parse_CLASS::PRINT=336;
const int YY_parse_CLASS::RADIUS=337;
const int YY_parse_CLASS::RESISTANCE=338;
const int YY_parse_CLASS::SCALE=339;
const int YY_parse_CLASS::SPHERE=340;
const int YY_parse_CLASS::TOUCH=341;
const int YY_parse_CLASS::VERTEX=342;
const int YY_parse_CLASS::VOLT=343;
const int YY_parse_CLASS::WINDOW=344;
const int YY_parse_CLASS::WITH=345;
const int YY_parse_CLASS::B3D_FORMAT=346;
const int YY_parse_CLASS::POINT=347;
const int YY_parse_CLASS::VTXLIST=348;
const int YY_parse_CLASS::OUTLOOP3D=349;
const int YY_parse_CLASS::MEDIUM_INTERFACE=350;
const int YY_parse_CLASS::WITHIN=351;
const int YY_parse_CLASS::CONSTVAR1=400;
const int YY_parse_CLASS::CONSTVAR2=401;
const int YY_parse_CLASS::NEWOBJ=500;
const int YY_parse_CLASS::OLDOBJ=501;
const int YY_parse_CLASS::MYEOF=600;
const int YY_parse_CLASS::FREG=601;
const int YY_parse_CLASS::UMINUS=258;


#line 341 "/usr/share/bison++/bison.cc"
 /* const YY_parse_CLASS::token */
#endif
/*apres const  */
YY_parse_CLASS::YY_parse_CLASS(YY_parse_CONSTRUCTOR_PARAM) YY_parse_CONSTRUCTOR_INIT
{
#if YY_parse_DEBUG != 0
YY_parse_DEBUG_FLAG=0;
#endif
YY_parse_CONSTRUCTOR_CODE;
};
#endif

 #line 352 "/usr/share/bison++/bison.cc"


#define	YYFINAL		144
#define	YYFLAG		-32768
#define	YYNTBASE	71

#define YYTRANSLATE(x) ((unsigned)(x) <= 601 ? yytranslate[x] : 108)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    66,
    67,    63,    61,    68,    62,     2,    64,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,    70,     2,
    69,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,    65,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     3,
     4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    55,
    56,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    57,
    58,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    59,
    60
};

#if YY_parse_DEBUG != 0
static const short yyprhs[] = {     0,
     0,     4,     6,     7,    10,    12,    14,    16,    18,    20,
    26,    28,    30,    33,    35,    38,    40,    42,    44,    46,
    50,    54,    56,    58,    62,    66,    70,    73,    81,    83,
    85,    94,    97,    98,   101,   102,   105,   110,   114,   115,
   118,   119,   122,   131,   142,   148,   149,   150,   151,   153,
   157,   161,   164,   165,   168,   174,   185,   189,   190,   192,
   195,   197,   198,   200,   203,   209,   218
};

static const short yyrhs[] = {    72,
    73,    74,     0,     8,     0,     0,    73,    75,     0,    20,
     0,    76,     0,    89,     0,    90,     0,   106,     0,    77,
    78,    80,    79,    24,     0,    33,     0,    85,     0,    17,
    82,     0,    81,     0,    80,    81,     0,    93,     0,    94,
     0,    95,     0,    83,     0,    82,    61,    82,     0,    82,
    62,    82,     0,    60,     0,    56,     0,    66,    82,    67,
     0,    83,    63,    83,     0,    83,    64,    83,     0,    62,
    83,     0,    66,    82,    68,    82,    68,    82,    67,     0,
    57,     0,    58,     0,     7,    84,     4,    84,     5,    84,
     6,    84,     0,    17,    82,     0,     0,    18,    84,     0,
     0,    50,    84,     0,    50,    84,    54,    82,     0,    53,
   103,   102,     0,     0,    42,    82,     0,     0,    69,    58,
     0,     9,    85,    92,    96,    86,    87,    88,    21,     0,
    38,    85,    92,    96,    86,    91,    99,    87,    88,    26,
     0,    51,    85,    97,    88,    26,     0,     0,     0,     0,
    98,     0,    35,    85,    99,     0,    52,    85,    99,     0,
   101,   100,     0,     0,   100,   101,     0,    45,   105,   105,
   105,   104,     0,    45,   105,   105,   105,   104,    70,   105,
   105,   105,   104,     0,    45,   103,   102,     0,     0,   103,
     0,   102,   103,     0,    84,     0,     0,   105,     0,   104,
   105,     0,    66,    82,    68,    82,    67,     0,    12,    85,
    92,    96,    86,    88,   107,    22,     0,    30,    82,     0
};

#endif

#if (YY_parse_DEBUG != 0) || defined(YY_parse_ERROR_VERBOSE) 
static const short yyrline[] = { 0,
   246,   248,   296,   297,   299,   315,   316,   317,   318,   323,
   328,   332,   334,   341,   342,   345,   346,   347,   350,   354,
   358,   363,   367,   371,   375,   379,   383,   389,   397,   401,
   407,   416,   421,   426,   433,   442,   449,   458,   482,   486,
   491,   495,   501,   513,   526,   536,   539,   542,   545,   547,
   555,   565,   567,   568,   569,   574,   579,   584,   585,   586,
   588,   594,   595,   596,   598,   604,   614
};

static const char * const yytname[] = {   "$","error","$illegal.","ALL","AXIS1",
"AXIS2","AXIS3","AT","BEGIN","BLOCK","CAPACITANCE","CHRG","CONDUCTOR","CONST",
"CYLINDER","CUT","DEBUG1","DIEL","ELEMENT","ELEMENTGAP","END","ENDB","ENDC",
"ENDL","ENDM","ENDS","ENDP","FOR","In","INLOOP","LAYERNUM","LOCAL","MASTERGAP",
"MEDIUM","MERGE","OUTLOOP","OVERRIDE","PLANE","POLY","PRINT","RADIUS","RESISTANCE",
"SCALE","SPHERE","TOUCH","VERTEX","VOLT","WINDOW","WITH","B3D_FORMAT","POINT",
"VTXLIST","OUTLOOP3D","MEDIUM_INTERFACE","WITHIN","CONSTVAR1","CONSTVAR2","NEWOBJ",
"OLDOBJ","MYEOF","FREG","'+'","'-'","'*'","'/'","UMINUS","'('","')'","','","'='",
"';'","program","begin","LINES","end","LINE","MEDIUMDEF","MEDIUMTAG","ELECOBJ",
"DIELDEF","SHAPEDEFS","SHAPEDEF","express","Factor","VECTOR","OBJ","OBJGEOMDEF",
"OBJELECDEF","OBJBOUNDDEF","POINTDEF","MEDIUM_INTERFACEDEF","OBJSCALEDEF","OBJEQUDEF",
"BLOCK_DEF","POLYDEF","VTXLIST_DEF","LOCALCOORDEF","LOOPDEF","OUTLOOPDEF","VERTEXDEFS",
"VERTEXMORE","VERTEXDEF","POINT3DMORE","POINT3D","POINT2DMORE","POINT2D","CONDUCTORDEF",
"LAYER","CONDUCTORDEF"
};
#endif

static const short yyr1[] = {     0,
    71,    72,    73,    73,    74,    75,    75,    75,    75,    76,
    77,    78,    79,    80,    80,    81,    81,    81,    82,    82,
    82,    83,    83,    83,    83,    83,    83,    84,    85,    85,
    86,    87,    87,    88,    88,    89,    89,    90,    91,    91,
    92,    92,    93,    94,    95,    96,    -1,    -1,    97,    98,
    98,    99,   100,   100,   101,   101,   101,   102,   102,   102,
   103,   104,   104,   104,   105,   106,   107
};

static const short yyr2[] = {     0,
     3,     1,     0,     2,     1,     1,     1,     1,     1,     5,
     1,     1,     2,     1,     2,     1,     1,     1,     1,     3,
     3,     1,     1,     3,     3,     3,     2,     7,     1,     1,
     8,     2,     0,     2,     0,     2,     4,     3,     0,     2,
     0,     2,     8,    10,     5,     0,     0,     0,     1,     3,
     3,     2,     0,     2,     5,    10,     3,     0,     1,     2,
     1,     0,     1,     2,     5,     8,     2
};

static const short yydefact[] = {     0,
     2,     3,     0,     0,     5,    11,     0,     0,     1,     4,
     6,     0,     7,     8,     9,    29,    30,    41,     0,    36,
    61,    58,     0,    12,     0,    46,    23,    22,     0,     0,
     0,    19,     0,    38,    59,     0,     0,     0,     0,    14,
    16,    17,    18,    42,     0,    27,     0,     0,     0,     0,
     0,     0,    37,    60,    41,    41,     0,     0,     0,    15,
     0,    35,    24,    20,    21,     0,    25,    26,    46,    46,
     0,     0,    35,    49,    13,    10,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    34,     0,     0,     0,
    33,    39,     0,    50,    53,    51,    45,     0,    67,    66,
    28,     0,    35,     0,     0,     0,    58,     0,    52,     0,
    32,     0,    40,    33,     0,    57,     0,     0,    54,     0,
    43,    35,     0,     0,    62,     0,     0,     0,     0,    55,
    63,    31,    44,    65,     0,     0,    64,     0,     0,    62,
    56,     0,     0,     0
};

static const short yydefgoto[] = {   142,
     2,     3,     9,    10,    11,    12,    23,    59,    39,    40,
    31,    32,    21,    18,    62,   103,    79,    13,    14,   105,
    26,    41,    42,    43,    45,    73,    74,    94,   109,    95,
    34,    35,   130,   131,    15,    89
};

static const short yypact[] = {     2,
-32768,-32768,    -9,   -12,-32768,-32768,   -54,   -54,-32768,-32768,
-32768,   -12,-32768,-32768,-32768,-32768,-32768,   -47,     8,   -27,
-32768,   -54,    -1,-32768,   -33,-32768,-32768,-32768,     8,     8,
    21,    45,     8,   -54,-32768,   -12,   -12,   -12,    -4,-32768,
-32768,-32768,-32768,-32768,    55,-32768,   -44,     8,     8,     8,
     8,     8,    36,-32768,   -47,   -47,   -26,     8,    29,-32768,
   -54,    47,-32768,-32768,-32768,    23,-32768,-32768,-32768,-32768,
   -12,   -12,    47,-32768,    36,-32768,    65,   -54,    48,     8,
    55,    55,    56,    56,    64,   -54,-32768,     8,    82,    19,
    90,    72,    51,-32768,-32768,-32768,-32768,   113,    36,-32768,
-32768,     8,    47,     8,    56,     8,   -54,    54,    56,   -54,
    36,   100,    36,    90,    31,   -54,     8,    54,-32768,   116,
-32768,    47,     8,    34,    54,   -54,    97,   -19,     8,     6,
-32768,-32768,-32768,-32768,    44,    54,-32768,    54,    54,    54,
    54,   124,   125,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    87,
   -29,   -13,    -7,    -5,   -25,    13,   -67,-32768,-32768,-32768,
    57,-32768,-32768,-32768,    46,-32768,-32768,   -70,-32768,    20,
    24,    -6,   -10,   -78,-32768,-32768
};


#define	YYLAST		131


static const short yytable[] = {    20,
    47,    22,     4,    53,    36,    85,    24,    36,    71,     1,
     5,    19,    58,    96,   108,    46,    48,    49,    64,    65,
    66,    25,    63,     6,    44,    72,    33,    54,    75,   118,
    55,    56,    57,    37,   114,   112,    37,    67,    68,   125,
     7,    48,    49,     8,    16,    17,    38,   134,    80,    38,
    90,   137,    76,    77,   127,    91,    92,   138,    99,   139,
   140,    61,   137,    27,    78,    83,    84,    28,    86,    29,
    87,   117,   111,    30,   113,   136,   115,    88,    98,    48,
    49,    48,    49,    48,    49,   101,   107,   124,    50,    97,
    80,    48,    49,   128,    48,    49,    48,    49,   123,   135,
    93,   129,   120,   100,    48,    49,   102,    51,    52,    54,
   134,    69,    70,   104,    81,    82,   106,   110,   132,   117,
   121,   126,   133,   143,   144,    60,   122,     0,   119,   141,
   116
};

static const short yycheck[] = {     7,
    30,     8,    12,    33,     9,    73,    12,     9,    35,     8,
    20,    66,    17,    84,    93,    29,    61,    62,    48,    49,
    50,    69,    67,    33,    58,    52,    54,    34,    58,   108,
    36,    37,    38,    38,   105,   103,    38,    51,    52,   118,
    50,    61,    62,    53,    57,    58,    51,    67,    68,    51,
    80,   130,    24,    61,   122,    81,    82,   136,    88,   138,
   139,     7,   141,    56,    18,    71,    72,    60,     4,    62,
    78,    66,   102,    66,   104,    70,   106,    30,    86,    61,
    62,    61,    62,    61,    62,    67,    93,   117,    68,    26,
    68,    61,    62,   123,    61,    62,    61,    62,    68,   129,
    45,    68,   110,    22,    61,    62,    17,    63,    64,   116,
    67,    55,    56,    42,    69,    70,    66,     5,   126,    66,
    21,     6,    26,     0,     0,    39,   114,    -1,   109,   140,
   107
};

#line 352 "/usr/share/bison++/bison.cc"
 /* fattrs + tables */

/* parser code folow  */


/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: dollar marks section change
   the next  is replaced by the list of actions, each action
   as one case of the switch.  */ 

#if YY_parse_USE_GOTO != 0
/* 
 SUPRESSION OF GOTO : on some C++ compiler (sun c++)
  the goto is strictly forbidden if any constructor/destructor
  is used in the whole function (very stupid isn't it ?)
 so goto are to be replaced with a 'while/switch/case construct'
 here are the macro to keep some apparent compatibility
*/
#define YYGOTO(lb) {yy_gotostate=lb;continue;}
#define YYBEGINGOTO  enum yy_labels yy_gotostate=yygotostart; \
                     for(;;) switch(yy_gotostate) { case yygotostart: {
#define YYLABEL(lb) } case lb: {
#define YYENDGOTO } } 
#define YYBEGINDECLARELABEL enum yy_labels {yygotostart
#define YYDECLARELABEL(lb) ,lb
#define YYENDDECLARELABEL  };
#else
/* macro to keep goto */
#define YYGOTO(lb) goto lb
#define YYBEGINGOTO 
#define YYLABEL(lb) lb:
#define YYENDGOTO
#define YYBEGINDECLARELABEL 
#define YYDECLARELABEL(lb)
#define YYENDDECLARELABEL 
#endif
/* LABEL DECLARATION */
YYBEGINDECLARELABEL
  YYDECLARELABEL(yynewstate)
  YYDECLARELABEL(yybackup)
/* YYDECLARELABEL(yyresume) */
  YYDECLARELABEL(yydefault)
  YYDECLARELABEL(yyreduce)
  YYDECLARELABEL(yyerrlab)   /* here on detecting error */
  YYDECLARELABEL(yyerrlab1)   /* here on error raised explicitly by an action */
  YYDECLARELABEL(yyerrdefault)  /* current state does not do anything special for the error token. */
  YYDECLARELABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */
  YYDECLARELABEL(yyerrhandle)  
YYENDDECLARELABEL
/* ALLOCA SIMULATION */
/* __HAVE_NO_ALLOCA */
#ifdef __HAVE_NO_ALLOCA
int __alloca_free_ptr(char *ptr,char *ref)
{if(ptr!=ref) free(ptr);
 return 0;}

#define __ALLOCA_alloca(size) malloc(size)
#define __ALLOCA_free(ptr,ref) __alloca_free_ptr((char *)ptr,(char *)ref)

#ifdef YY_parse_LSP_NEEDED
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		    __ALLOCA_free(yyls,yylsa)+\
		   (num)); } while(0)
#else
#define __ALLOCA_return(num) \
            do { return( __ALLOCA_free(yyss,yyssa)+\
		    __ALLOCA_free(yyvs,yyvsa)+\
		   (num)); } while(0)
#endif
#else
#define __ALLOCA_return(num) do { return(num); } while(0)
#define __ALLOCA_alloca(size) alloca(size)
#define __ALLOCA_free(ptr,ref) 
#endif

/* ENDALLOCA SIMULATION */

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (YY_parse_CHAR = YYEMPTY)
#define YYEMPTY         -2
#define YYEOF           0
#define YYACCEPT        __ALLOCA_return(0)
#define YYABORT         __ALLOCA_return(1)
#define YYERROR         YYGOTO(yyerrlab1)
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL          YYGOTO(yyerrlab)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do                                                              \
  if (YY_parse_CHAR == YYEMPTY && yylen == 1)                               \
    { YY_parse_CHAR = (token), YY_parse_LVAL = (value);                 \
      yychar1 = YYTRANSLATE (YY_parse_CHAR);                                \
      YYPOPSTACK;                                               \
      YYGOTO(yybackup);                                            \
    }                                                           \
  else                                                          \
    { YY_parse_ERROR ("syntax error: cannot back up"); YYERROR; }   \
while (0)

#define YYTERROR        1
#define YYERRCODE       256

#ifndef YY_parse_PURE
/* UNPURE */
#define YYLEX           YY_parse_LEX()
#ifndef YY_USE_CLASS
/* If nonreentrant, and not class , generate the variables here */
int     YY_parse_CHAR;                      /*  the lookahead symbol        */
YY_parse_STYPE      YY_parse_LVAL;              /*  the semantic value of the */
				/*  lookahead symbol    */
int YY_parse_NERRS;                 /*  number of parse errors so far */
#ifdef YY_parse_LSP_NEEDED
YY_parse_LTYPE YY_parse_LLOC;   /*  location data for the lookahead     */
			/*  symbol                              */
#endif
#endif


#else
/* PURE */
#ifdef YY_parse_LSP_NEEDED
#define YYLEX           YY_parse_LEX(&YY_parse_LVAL, &YY_parse_LLOC)
#else
#define YYLEX           YY_parse_LEX(&YY_parse_LVAL)
#endif
#endif
#ifndef YY_USE_CLASS
#if YY_parse_DEBUG != 0
int YY_parse_DEBUG_FLAG;                    /*  nonzero means print parse trace     */
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
#endif



/*  YYINITDEPTH indicates the initial size of the parser's stacks       */

#ifndef YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif


#if __GNUC__ > 1                /* GNU C and GNU C++ define this.  */
#define __yy_bcopy(FROM,TO,COUNT)       __builtin_memcpy(TO,FROM,COUNT)
#else                           /* not GNU C or C++ */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */

#ifdef __cplusplus
static void __yy_bcopy (char *from, char *to, int count)
#else
#ifdef __STDC__
static void __yy_bcopy (char *from, char *to, int count)
#else
static void __yy_bcopy (from, to, count)
     char *from;
     char *to;
     int count;
#endif
#endif
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}
#endif


int
#ifdef YY_USE_CLASS
 YY_parse_CLASS::
#endif
     YY_parse_PARSE(YY_parse_PARSE_PARAM)
#ifndef __STDC__
#ifndef __cplusplus
#ifndef YY_USE_CLASS
/* parameter definition without protypes */
YY_parse_PARSE_PARAM_DEF
#endif
#endif
#endif
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YY_parse_STYPE *yyvsp;
  int yyerrstatus;      /*  number of tokens to shift before error messages enabled */
  int yychar1=0;          /*  lookahead token as an internal (translated) token number */

  short yyssa[YYINITDEPTH];     /*  the state stack                     */
  YY_parse_STYPE yyvsa[YYINITDEPTH];        /*  the semantic value stack            */

  short *yyss = yyssa;          /*  refer to the stacks thru separate pointers */
  YY_parse_STYPE *yyvs = yyvsa;     /*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YY_parse_LSP_NEEDED
  YY_parse_LTYPE yylsa[YYINITDEPTH];        /*  the location stack                  */
  YY_parse_LTYPE *yyls = yylsa;
  YY_parse_LTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YY_parse_PURE
  int YY_parse_CHAR;
  YY_parse_STYPE YY_parse_LVAL;
  int YY_parse_NERRS;
#ifdef YY_parse_LSP_NEEDED
  YY_parse_LTYPE YY_parse_LLOC;
#endif
#endif

  YY_parse_STYPE yyval;             /*  the variable used to return         */
				/*  semantic values from the action     */
				/*  routines                            */

  int yylen;
/* start loop, in which YYGOTO may be used. */
YYBEGINGOTO

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    fprintf(stderr, "Starting parse\n");
#endif
  yystate = 0;
  yyerrstatus = 0;
  YY_parse_NERRS = 0;
  YY_parse_CHAR = YYEMPTY;          /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YY_parse_LSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
YYLABEL(yynewstate)

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YY_parse_STYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YY_parse_LSP_NEEDED
      YY_parse_LTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YY_parse_LSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YY_parse_LSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  YY_parse_ERROR("parser stack overflow");
	  __ALLOCA_return(2);
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) __ALLOCA_alloca (yystacksize * sizeof (*yyssp));
      __yy_bcopy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      __ALLOCA_free(yyss1,yyssa);
      yyvs = (YY_parse_STYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yyvsp));
      __yy_bcopy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
      __ALLOCA_free(yyvs1,yyvsa);
#ifdef YY_parse_LSP_NEEDED
      yyls = (YY_parse_LTYPE *) __ALLOCA_alloca (yystacksize * sizeof (*yylsp));
      __yy_bcopy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
      __ALLOCA_free(yyls1,yylsa);
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YY_parse_LSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YY_parse_DEBUG != 0
      if (YY_parse_DEBUG_FLAG)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  YYGOTO(yybackup);
YYLABEL(yybackup)

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* YYLABEL(yyresume) */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yydefault);

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (YY_parse_CHAR == YYEMPTY)
    {
#if YY_parse_DEBUG != 0
      if (YY_parse_DEBUG_FLAG)
	fprintf(stderr, "Reading a token: ");
#endif
      YY_parse_CHAR = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (YY_parse_CHAR <= 0)           /* This means end of input. */
    {
      yychar1 = 0;
      YY_parse_CHAR = YYEOF;                /* Don't call YYLEX any more */

#if YY_parse_DEBUG != 0
      if (YY_parse_DEBUG_FLAG)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(YY_parse_CHAR);

#if YY_parse_DEBUG != 0
      if (YY_parse_DEBUG_FLAG)
	{
	  fprintf (stderr, "Next token is %d (%s", YY_parse_CHAR, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, YY_parse_CHAR, YY_parse_LVAL);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    YYGOTO(yydefault);

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrlab);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrlab);

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    fprintf(stderr, "Shifting token %d (%s), ", YY_parse_CHAR, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (YY_parse_CHAR != YYEOF)
    YY_parse_CHAR = YYEMPTY;

  *++yyvsp = YY_parse_LVAL;
#ifdef YY_parse_LSP_NEEDED
  *++yylsp = YY_parse_LLOC;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  YYGOTO(yynewstate);

/* Do the default action for the current state.  */
YYLABEL(yydefault)

  yyn = yydefact[yystate];
  if (yyn == 0)
    YYGOTO(yyerrlab);

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
YYLABEL(yyreduce)
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


 #line 839 "/usr/share/bison++/bison.cc"

  switch (yyn) {

case 2:
#line 249 "src/yf2.y"
{
		ConstVarNum=0;
		ObjNum=0;
		iErrorFlag=0;
		miline=0;
		Curmed=0;
		Curblk=0;
		Conblk=0;
		InterfaceNum = 0 ; 
		int i;
		tempelec = new double [block_number];

		usTempEle = new ushort * [block_number];
		if (cond_number > 0){
			usTempEleCon = new ushort * [cond_number];
		}
		for (i=0;i<block_number;i++)
			usTempEle[i] = new ushort [3];
		for (i=0;i<cond_number;i++)
			usTempEleCon[i] = new ushort [3];
		//add by [whquan]
		tempblock2 = new TGEOMETRYINFO[block_number];
		if(cond_number>=1){
			if(block_number!=1){
				cout << "Wrong input block number!" << endl;
			}
		}
	
		gBdElements = new TBDELEINFO * [block_number];
		
		ObjField = new OBJECTFIELD [4*(block_number+cond_number)];
		ConstVarList = new char * [2*(block_number+cond_number)];
		for (i=0;i<2*(block_number+cond_number);i++)
		   ConstVarList[i] = new char [32];
		if(ConstVarList==NULL) 
			printf("ERROR: not enough memory!\n");
		ConstValList = new double [2*(block_number+cond_number)];   

		pddlPoint2DBuf = new TPOINT2D [point_maxno];
		pddlPoint3DBuf = new TPOINT [point_maxno];	//add by [whquan]
		pddlOutLoopPoint2DBuf = new TPOINT2D [point_maxno];
		pddlOutLoopPoint3DBuf = new TPOINT [point_maxno];	//add by [whquan]
		//add by [whquan]
		pddlPoint3DNum=0;
		pddlOutLoopPoint3DNum=0;
    ;
    break;}
case 5:
#line 300 "src/yf2.y"
{
		int i;
		delete[] pddlPoint2DBuf;
		delete[] pddlPoint3DBuf;	//add by [whquan]
		delete[] pddlOutLoopPoint2DBuf;
		delete[] pddlOutLoopPoint3DBuf;	//add by [whquan]

		for (i=0;i<2*(block_number+cond_number);i++)
		{
			delete[] ConstVarList[i];
		}
		delete[] ConstVarList;
		delete[] ConstValList;
		delete[] ObjField;
    ;
    break;}
case 10:
#line 324 "src/yf2.y"
{
			Curmed++;
		;
    break;}
case 13:
#line 335 "src/yf2.y"
{
			lu_diel=yyvsp[0].fval;
			tempelec[Curmed]=lu_diel;
		;
    break;}
case 19:
#line 351 "src/yf2.y"
{
		yyval.fval=yyvsp[0].fval;
           ;
    break;}
case 20:
#line 355 "src/yf2.y"
{
	      yyval.fval=yyvsp[-2].fval+yyvsp[0].fval;
           ;
    break;}
case 21:
#line 359 "src/yf2.y"
{
		yyval.fval=yyvsp[-2].fval-yyvsp[0].fval;
           ;
    break;}
case 22:
#line 364 "src/yf2.y"
{
            yyval.fval=yyvsp[0].fval;
         ;
    break;}
case 23:
#line 368 "src/yf2.y"
{
	    yyval.fval=ConstValList[yyvsp[0].ival];
         ;
    break;}
case 24:
#line 372 "src/yf2.y"
{
		yyval.fval=yyvsp[-1].fval;
        ;
    break;}
case 25:
#line 376 "src/yf2.y"
{
	   yyval.fval=yyvsp[-2].fval*yyvsp[0].fval;
        ;
    break;}
case 26:
#line 380 "src/yf2.y"
{
	    yyval.fval=yyvsp[-2].fval/yyvsp[0].fval;
        ;
    break;}
case 27:
#line 384 "src/yf2.y"
{
	  yyval.fval=-yyvsp[0].fval;
        ;
    break;}
case 28:
#line 390 "src/yf2.y"
{
    yyval.vector.x=yyvsp[-5].fval;
    yyval.vector.y=yyvsp[-3].fval;
    yyval.vector.z=yyvsp[-1].fval;
   ;
    break;}
case 29:
#line 398 "src/yf2.y"
{
		yyval.ival=-yyvsp[0].ival-1;
	     ;
    break;}
case 30:
#line 402 "src/yf2.y"
{
		yyval.ival=yyvsp[0].ival;
	     ;
    break;}
case 31:
#line 408 "src/yf2.y"
{
			yyval.tgGeomInfo.basePoint=yyvsp[-6].vector;
			yyval.tgGeomInfo.xAxis=yyvsp[-4].vector;
			yyval.tgGeomInfo.yAxis=yyvsp[-2].vector;
			yyval.tgGeomInfo.zAxis=yyvsp[0].vector;
        ;
    break;}
case 32:
#line 417 "src/yf2.y"
{
			yyval.teElecInfo.mask=ENABLE_DIEL;
			yyval.teElecInfo.dielVal=yyvsp[0].fval;
		;
    break;}
case 33:
#line 422 "src/yf2.y"
{
			yyval.teElecInfo.mask=ENABLE_NONE_VALUE;
		;
    break;}
case 34:
#line 427 "src/yf2.y"
{
			yyval.tbBouEleInfo.mask=ENABLE_3D;
            yyval.tbBouEleInfo.xAxis=(long)(yyvsp[0].vector.x);
			yyval.tbBouEleInfo.yAxis=(long)(yyvsp[0].vector.y);
			yyval.tbBouEleInfo.zAxis=(long)(yyvsp[0].vector.z);
		;
    break;}
case 35:
#line 434 "src/yf2.y"
{
			yyval.tbBouEleInfo.mask=ENABLE_NONE;
			yyval.tbBouEleInfo.xAxis=(long)(0);
			yyval.tbBouEleInfo.yAxis=(long)(0);
			yyval.tbBouEleInfo.zAxis=(long)(0);
		;
    break;}
case 36:
#line 443 "src/yf2.y"
{
			yyval.vector.x= (double)(yyvsp[0].vector.x);
			yyval.vector.y= (double)(yyvsp[0].vector.y);
			yyval.vector.z= (double)(yyvsp[0].vector.z);
			observePoint= yyval.vector;
		;
    break;}
case 37:
#line 450 "src/yf2.y"
{
			yyval.vector.x= (double)(yyvsp[-2].vector.x);
			yyval.vector.y= (double)(yyvsp[-2].vector.y);
			yyval.vector.z= (double)(yyvsp[-2].vector.z);
			observePoint= yyval.vector;
			pointInMediumId = (int)yyvsp[0].fval;
		;
    break;}
case 38:
#line 459 "src/yf2.y"
{
			//add by [whquan]
			if(frw){
				pddlInterfacePoint3DNum = pddlPoint3DNum;
				pddlInterfacePoint3DBuf = new TPOINT[pddlInterfacePoint3DNum];
           			 for(int i = 0 ; i < pddlPoint3DNum ; i++) 
					pddlInterfacePoint3DBuf[i] = pddlPoint3DBuf[i]; 
         				   pddlPoint3DNum = 0; 
			}if(bcm){ // add by [zhangbl]
				pddlInterfacePoint3DNum = pddlPoint3DNum;
				pddlInterfacePoint3DBufMul = new TPOINT * [Curblk-1];
				for (int i = 0 ; i < Curblk-1 ; i++){
					pddlInterfacePoint3DBufMul[i] = new TPOINT [pddlInterfacePoint3DNum];
				}
				for ( int i = 0 ; i < pddlPoint3DNum ; i ++){
					pddlInterfacePoint3DBufMul[InterfaceNum][i]= pddlPoint3DBuf[i];
					pddlPoint3DNum = 0 ;
					 
				}
				InterfaceNum = InterfaceNum + 1;
			}	
		;
    break;}
case 39:
#line 483 "src/yf2.y"
{
			yyval.fval=1.0;
		;
    break;}
case 40:
#line 487 "src/yf2.y"
{
			yyval.fval=yyvsp[0].fval;
  	        ;
    break;}
case 41:
#line 492 "src/yf2.y"
{
			yyval.ival=-1;
		;
    break;}
case 42:
#line 496 "src/yf2.y"
{
			yyval.ival=yyvsp[0].ival;
		;
    break;}
case 43:
#line 502 "src/yf2.y"
{
			//ADD BY [whquan]
			trans_area_type[Curblk] = CUBE_TRANS_AREA;
			tempblock2[Curblk] = yyvsp[-3].tgGeomInfo;
			usTempEle[Curblk][0]=(ushort)yyvsp[-1].tbBouEleInfo.xAxis;
   			usTempEle[Curblk][1]=(ushort)yyvsp[-1].tbBouEleInfo.yAxis;
   			usTempEle[Curblk][2]=(ushort)yyvsp[-1].tbBouEleInfo.zAxis;
			Curblk++;
	    ;
    break;}
case 44:
#line 514 "src/yf2.y"
{			
			//add by [whquan]
			tempblock2[Curblk] = yyvsp[-5].tgGeomInfo;
			point2Dto3D(Curblk);
			usTempEle[Curblk][0]=(ushort)yyvsp[-1].tbBouEleInfo.xAxis;
			usTempEle[Curblk][1]=(ushort)yyvsp[-1].tbBouEleInfo.yAxis;
			usTempEle[Curblk][2]=(ushort)yyvsp[-1].tbBouEleInfo.zAxis;
			Curblk++;
			pddlPoint2DNum=0;
		;
    break;}
case 45:
#line 527 "src/yf2.y"
{	//add by [whquan]
			trans_area_type[Curblk] = FRUSTUM_TRANS_AREA;
			point3D_save(Curblk);
			usTempEle[Curblk][0] = (ushort)yyvsp[-1].tbBouEleInfo.xAxis;
			usTempEle[Curblk][1] = (ushort)yyvsp[-1].tbBouEleInfo.yAxis;
			usTempEle[Curblk][2] = (ushort)yyvsp[-1].tbBouEleInfo.xAxis;
			Curblk++;
		;
    break;}
case 50:
#line 548 "src/yf2.y"
{
		   pddlOutLoopPoint2DNum = pddlPoint2DNum;
		   int i;
		   for(i = 0 ; i < pddlPoint2DNum ; i++) 
			  pddlOutLoopPoint2DBuf[i] = pddlPoint2DBuf[i]; 
		   pddlPoint2DNum = 0; 
	   ;
    break;}
case 51:
#line 556 "src/yf2.y"
{
		//add by [whquan]
            pddlOutLoopPoint3DNum = pddlPoint3DNum;
			int i;
            for( i = 0 ; i < pddlPoint3DNum ; i++) 
				pddlOutLoopPoint3DBuf[i] = pddlPoint3DBuf[i]; 
            pddlPoint3DNum = 0; 
	   ;
    break;}
case 55:
#line 570 "src/yf2.y"
{
			//add by [whquan]
			trans_area_type[Curblk] = PRISM_TRANS_AREA;
	 ;
    break;}
case 56:
#line 575 "src/yf2.y"
{
			//add by [whquan] to recognize tsv	
			trans_area_type[Curblk] = PRISM_TSV_TRANS_AREA;		
	 ;
    break;}
case 57:
#line 580 "src/yf2.y"
{
		//add by [whquan]
		//do something you want to do
	 ;
    break;}
case 61:
#line 589 "src/yf2.y"
{
			//add by [whquan]
			yyval.pt3D=yyvsp[0].vector;
			pddlPoint3DBuf[pddlPoint3DNum++]=yyval.pt3D;
		;
    break;}
case 65:
#line 599 "src/yf2.y"
{
			yyval.pt2D.x=yyvsp[-3].fval;
			yyval.pt2D.y=yyvsp[-1].fval;
			pddlPoint2DBuf[pddlPoint2DNum++]=yyval.pt2D;
		;
    break;}
case 66:
#line 605 "src/yf2.y"
{//add by [zhangbl]
			cond.layerNum = yyvsp[-1].ival;
			cond.geo = yyvsp[-3].tgGeomInfo;
			cond.xEle=(ushort)yyvsp[-2].tbBouEleInfo.xAxis;
   			cond.yEle=(ushort)yyvsp[-2].tbBouEleInfo.yAxis;
   			cond.zEle=(ushort)yyvsp[-2].tbBouEleInfo.zAxis;
			conductors.push_back(cond);
	    ;
    break;}
case 67:
#line 615 "src/yf2.y"
{
	yyval.ival=yyvsp[0].fval;
;
    break;}
}

#line 839 "/usr/share/bison++/bison.cc"
   /* the action file gets copied in in place of this dollarsign  */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YY_parse_LSP_NEEDED
  yylsp -= yylen;
#endif

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YY_parse_LSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = YY_parse_LLOC.first_line;
      yylsp->first_column = YY_parse_LLOC.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  YYGOTO(yynewstate);

YYLABEL(yyerrlab)   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++YY_parse_NERRS;

#ifdef YY_parse_ERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      YY_parse_ERROR(msg);
	      free(msg);
	    }
	  else
	    YY_parse_ERROR ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YY_parse_ERROR_VERBOSE */
	YY_parse_ERROR("parse error");
    }

  YYGOTO(yyerrlab1);
YYLABEL(yyerrlab1)   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (YY_parse_CHAR == YYEOF)
	YYABORT;

#if YY_parse_DEBUG != 0
      if (YY_parse_DEBUG_FLAG)
	fprintf(stderr, "Discarding token %d (%s).\n", YY_parse_CHAR, yytname[yychar1]);
#endif

      YY_parse_CHAR = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;              /* Each real token shifted decrements this */

  YYGOTO(yyerrhandle);

YYLABEL(yyerrdefault)  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) YYGOTO(yydefault);
#endif

YYLABEL(yyerrpop)   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YY_parse_LSP_NEEDED
  yylsp--;
#endif

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

YYLABEL(yyerrhandle)

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    YYGOTO(yyerrdefault);

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    YYGOTO(yyerrdefault);

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	YYGOTO(yyerrpop);
      yyn = -yyn;
      YYGOTO(yyreduce);
    }
  else if (yyn == 0)
    YYGOTO(yyerrpop);

  if (yyn == YYFINAL)
    YYACCEPT;

#if YY_parse_DEBUG != 0
  if (YY_parse_DEBUG_FLAG)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = YY_parse_LVAL;
#ifdef YY_parse_LSP_NEEDED
  *++yylsp = YY_parse_LLOC;
#endif

  yystate = yyn;
  YYGOTO(yynewstate);
/* end loop, in which YYGOTO may be used. */
  YYENDGOTO
}

/* END */

 #line 1038 "/usr/share/bison++/bison.cc"
#line 619 "src/yf2.y"


int yylex()         
{
  char ch;

  do{
    ch=tpddlin->get();
    if (ch==EOF)
      return EOF;
    if(ch==RemarkChar){
	char NextChar;

	NextChar=tpddlin->get();
	if(NextChar==RemarkChar){
		while(NextChar!='\n')
			NextChar=tpddlin->get();
		ch=tpddlin->get();
	}
	else
		if(NextChar=='*') {
			char FirstChar;
			
			NextChar=tpddlin->get();
			do {
				FirstChar=NextChar;
				NextChar =tpddlin->get();
			} while(!(FirstChar=='*' && NextChar==RemarkChar));
			ch=tpddlin->get();
		}
		else
			tpddlin->putback(NextChar);
   }
		
    if (ch=='\n')
      miline++;
   }while ((ch==' ')||(ch=='\n')||(ch=='\t')||(ch=='\r'));
    tpddlin->putback(ch);

    if (IsAlpha(ch))
       return DoAlpha(tpddlin);
    else
        if (IsDigit(ch))
	    return DoDigit(tpddlin);
        else 
	     return tpddlin->get(); 
}

BOOL IsAlpha(char ch)
{
     if ((ch>='A')&&(ch<='Z'))
       return TRUE;
     if ((ch>='a')&&(ch<='z'))
        return TRUE;
     if  (ch=='_')
	 return TRUE;

     return FALSE;
}
BOOL IsDigit(char ch)
{
     if ((ch>='0')&&(ch<='9'))
	return TRUE;

      return FALSE;
}

int DoAlpha(ifstream *input)
{
   int i,pos;
   static int ConstFlag=0; 

   char str[32],ch;

   ch=input->get();
   pos=0;
   while(IsAlpha(ch)||IsDigit(ch)){
	str[pos++]=ch;
	ch=input->get();
   }
   str[pos]=0;
   input->putback(ch);
   
   for (i=0;i<TokenLen;i++)
      if(strcmp(str,ReservedWordsList[i])==0)
	{
		yylval.ival=i;
		if(i==ConstPos)/*if it is 'const'*/
			ConstFlag=1;

		return 300+i;
	}

   for(i=0;i<ObjNum;i++)
      if(strcmp(str,ObjField[i].Name)==0)
	{
		yylval.ival=i;
		return OLDOBJ;
	}

  for (i=0;i<ConstVarNum;i++)
      if(strcmp(str,ConstVarList[i])==0)
	{
		yylval.ival=i;
		return CONSTVAR2;
	}

   if(ConstFlag){
	strcpy(ConstVarList[ConstVarNum],str);
	yylval.ival=ConstVarNum;
	ConstVarNum++;
	ConstFlag=0;
	return CONSTVAR1;
    }
   else {
     	strcpy(ObjField[ObjNum].Name,str);
	strcpy(tmp,str);
       	yylval.ival=ObjNum;
     	ObjNum++;
       	return NEWOBJ;
    }
}

int DoDigit(ifstream *input)
{
    double i;
    *input>>i;
    yylval.fval=i; 

    return FREG;
}

void yyerror(char *s)  // Shenbd
{
  iErrorFlag=1;
}
